{
	"compiler": {
		"version": "0.8.26+commit.8a97fa7a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "balance",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "BalanceNotLargeEnoughInsideContract",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "balance",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "BalanceNotLargeEnoughOnGlobalSpace",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "deposit",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "withdraw",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "Demonstrates various error handling mechanisms in Solidity: - `require`: Checks for valid conditions and inputs. - `revert`: Handles custom error messages and state reverting. - `assert`: Checks for code invariants. - Custom Errors: Allows efficient error handling with custom error types. This contract includes examples of errors defined both globally and inside the contract.",
			"errors": {
				"BalanceNotLargeEnoughInsideContract(uint256,uint256)": [
					{
						"details": "Custom error defined inside the contract for handling insufficient balance errors."
					}
				],
				"BalanceNotLargeEnoughOnGlobalSpace(uint256,uint256)": [
					{
						"details": "Global error definition for handling insufficient balance errors outside of any specific contract scope."
					}
				]
			},
			"kind": "dev",
			"methods": {
				"deposit()": {
					"details": "Deposit function to add Ether to the sender's balance. The payable modifier allows the function to receive Ether."
				},
				"withdraw(uint256)": {
					"details": "Withdraw function to withdraw a specified amount of Ether from the sender's balance. Includes error handling using require, assert, and revert, as well as custom errors.",
					"params": {
						"amount": "The amount of Ether (in wei) to withdraw."
					}
				}
			},
			"title": "Exception and Error Handling Contract",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/ExceptionAndErrorHandling.sol": "ExceptionAndErrorHandling"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/ExceptionAndErrorHandling.sol": {
			"keccak256": "0x148cddd5c0039511574234745cedd9a1f549363e64c38af5c5ecf1d514e29684",
			"license": "MIT",
			"urls": [
				"bzz-raw://604119dd0e5c4c435192942319be4c195c740419e6ef12f5fe7bc7e99c691e71",
				"dweb:/ipfs/QmfELL55CpmwgB48C6emMvvozoaM5RzkuPMVWEQXComHSF"
			]
		}
	},
	"version": 1
}